apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka-headless
  replicas: 3
  podManagementPolicy: OrderedReady   # kafka-0 must start first
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:latest   # you may want to pin a specific version
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://$(HOSTNAME).kafka-headless:9092"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-headless:9093,1@kafka-1.kafka-headless:9093,2@kafka-2.kafka-headless:9093"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            # Neutral cluster ID var (only kafka-0 will use it)
            - name: CLUSTER_ID_VALUE
              value: "KTNSyJKsSSWYHBJpQ4OebQ"

          # Wrapper ensures node.id is set and only kafka-0 formats
          args:
            - bash
            - -lc
            - |
              # Extract ordinal from hostname (kafka-0 -> 0, etc.)
              export KAFKA_CFG_NODE_ID="${HOSTNAME##*-}"
              echo ">> $HOSTNAME using node.id=$KAFKA_CFG_NODE_ID"

              if [[ "$HOSTNAME" == "kafka-0" ]]; then
                export KAFKA_CLUSTER_ID="$CLUSTER_ID_VALUE"
                echo ">> kafka-0 exporting KAFKA_CLUSTER_ID=$KAFKA_CLUSTER_ID (format once)"
              else
                echo ">> $HOSTNAME joining cluster (no formatting)"
              fi

              exec /opt/bitnami/scripts/kafka/run.sh

          readinessProbe:
            exec:
              command: ["sh","-c","kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12
          livenessProbe:
            exec:
              command: ["sh","-c","kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 6

          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
        labels:
          app: kafka
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi